import numpy as np
import sympy as sp

def compute_eigen(matrix):
    np_vals, np_vecs = np.linalg.eig(matrix)
    
    sym_matrix = sp.Matrix(matrix)
    sym_eigen = sym_matrix.eigenvects()
    
    return np_vals, np_vecs, sym_matrix, sym_eigen

def display_results(eigenvalues, eigenvectors, symbolic_data):
    print("Numerical eigenvalues:")
    for idx, val in enumerate(eigenvalues):
        print(f"λ{idx+1} = {val:8.4f}")
        print("  Vector:", eigenvectors[:, idx])
    
    print("\nSymbolic eigenvalues:")
    for multiplicity, val, vectors in symbolic_data:
        print(f"λ = {val}  (multiplicity {multiplicity})")
        for v in vectors:
            print("  Vector:", v)

def compute_characteristic(matrix):
    return sp.factor(matrix.charpoly().as_expr())

sample_matrix = np.array([
    [4, 2, 2],
    [1, 3, 1],
    [0, 5, 5]
], dtype=float)

vals, vecs, sym_mat, sym_eig = compute_eigen(sample_matrix)
display_results(vals, vecs, sym_eig)

poly = compute_characteristic(sym_mat)
print("\nCharacteristic polynomial:", poly)
