def gauss_elim(A, b):
    n = len(A)
    A = [row[:] for row in A]
    b = b[:]

    for k in range(n):
        pivot = max(range(k, n), key=lambda i: abs(A[i][k]))
        if abs(A[pivot][k]) < 1e-12:
            raise ValueError("Matrix is singular")
        
        A[k], A[pivot] = A[pivot], A[k]
        b[k], b[pivot] = b[pivot], b[k]

        for i in range(k+1, n):
            f = A[i][k] / A[k][k]
            A[i][k:] = [A[i][j] - f*A[k][j] for j in range(k, n)]
            b[i] -= f * b[k]

    x = [0] * n
    for i in reversed(range(n)):
        if abs(A[i][i]) < 1e-12:
            raise ValueError("Matrix is singular")
        x[i] = (b[i] - sum(A[i][j]*x[j] for j in range(i+1, n))) / A[i][i]
    
    return x


if __name__ == "__main__":
    M = [
        [ 2,  1, -1],
        [-3, -1,  2],
        [-2,  1,  2]
    ]
    v = [8, -11, -3]

    print(gauss_elim(M, v))  # [2.0, 3.0, -1.0]
