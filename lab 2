def matrix_inverse(M):
    size = len(M)
    if any(len(r) != size for r in M):
        raise ValueError("Invalid matrix dimensions")

    extended = [M[i] + [1.0 if j == i else 0.0 for j in range(size)] for i in range(size)]
    
    for k in range(size):
        max_idx = max(range(k, size), key=lambda x: abs(extended[x][k]))
        if abs(extended[max_idx][k]) < 1e-10:
            raise ValueError("Matrix is not invertible")
        
        extended[k], extended[max_idx] = extended[max_idx], extended[k]
        
        div = extended[k][k]
        extended[k] = [x / div for x in extended[k]]
        
        for i in range(size):
            if i != k:
                mult = extended[i][k]
                extended[i] = [x - mult * extended[k][j] for j, x in enumerate(extended[i])]
    
    result = [row[size:] for row in extended]
    return result


if __name__ == "__main__":
    test_matrix = [
        [1, 0, 0],
        [1, 1, 1],
        [0, 0, 1]
    ]
    
    try:
        inverted = matrix_inverse(test_matrix)
        for line in inverted:
            print([round(x, 6) for x in line])
    except ValueError as err:
        print(err)
